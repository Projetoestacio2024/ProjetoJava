/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;
import Controllers.MenuPrincipalController;
import Model.DAO.AgendamentoDAO;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import model.Agendamento;

/**
 *
 * @author Thalles
 */
public class MenuPrincipal extends javax.swing.JFrame 
{
    // Private
    private final MenuPrincipalController controler;
    JFrame frame = this;
    
    /**Creates new form MenuPrincipal */
    public MenuPrincipal() 
    {       
        // Componentes
        initComponents();
        
        // Controler
        this.controler = new MenuPrincipalController(this);
               
        // CFG Janela
        configuracaoJanela();
               
        // Travar Fechamento
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        
        // Adiciona um WindowListener para detectar o fechamento da janela
        addWindowListener(new WindowAdapter() 
        {
            @Override
            public void windowClosing(WindowEvent e) 
            {
                // Exibe um diálogo de confirmação
                int confirmed = JOptionPane.showConfirmDialog(
                        null, 
                        "Tem certeza que deseja sair?", 
                        "Confirmação de Saída",
                        JOptionPane.YES_NO_OPTION);

                if (confirmed == JOptionPane.YES_OPTION) {
                    // Fecha todas as janelas e sai do aplicativo
                    //dispose();
                    System.exit(0);
                }
            }
        });
        
        AgendamentoDAO agendamentoDAO = new AgendamentoDAO();
        ArrayList<Agendamento> agendamentos = agendamentoDAO.selectAll();
        DefaultTableModel tablemodel = (DefaultTableModel) this.getTabelaHome().getModel();
        tablemodel.setNumRows(0);
        for(Agendamento agendamento : agendamentos){            
            tablemodel.addRow(new Object[]{
                agendamento.getCliente(),
                agendamento.getServico(),
                agendamento.getObservacao(),
                agendamento.getDataFormatada(),
                agendamento.getHoraFormatada(),
                agendamento.getValor()
            });
            
            System.err.println("TESTE ATUALIZACAO");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        testLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaHome = new javax.swing.JTable();
        labelTabela = new javax.swing.JLabel();
        jMenu = new javax.swing.JMenuBar();
        opcaocadastro = new javax.swing.JMenu();
        cadastrocliente = new javax.swing.JMenuItem();
        agenda = new javax.swing.JMenuItem();
        cadastroservico = new javax.swing.JMenuItem();
        cadastrousuario = new javax.swing.JMenuItem();
        sair = new javax.swing.JMenuItem();

        testLabel.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tabelaHome.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Cliente", "Serviço", "Observação", "Data agendada", "Hora agendada", "Valor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelaHome);

        jMenu.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N

        opcaocadastro.setText("Opções");
        opcaocadastro.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N

        cadastrocliente.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        cadastrocliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/imagens/icons/cliente32-icon.png"))); // NOI18N
        cadastrocliente.setText("Cliente");
        cadastrocliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadastroclienteActionPerformed(evt);
            }
        });
        opcaocadastro.add(cadastrocliente);

        agenda.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        agenda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/imagens/icons/agenda32-icon.png"))); // NOI18N
        agenda.setText("Marcar agendamento");
        agenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agendaActionPerformed(evt);
            }
        });
        opcaocadastro.add(agenda);

        cadastroservico.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        cadastroservico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/imagens/icons/tesoura32-icon.png"))); // NOI18N
        cadastroservico.setText("Serviço");
        cadastroservico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadastroservicoActionPerformed(evt);
            }
        });
        opcaocadastro.add(cadastroservico);

        cadastrousuario.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        cadastrousuario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/imagens/icons/usuario32-icon.png"))); // NOI18N
        cadastrousuario.setText("Usuário");
        cadastrousuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadastrousuarioActionPerformed(evt);
            }
        });
        opcaocadastro.add(cadastrousuario);

        sair.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        sair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/imagens/icons/cliente32-icon.png"))); // NOI18N
        sair.setText("Desconectar");
        sair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sairActionPerformed(evt);
            }
        });
        opcaocadastro.add(sair);

        jMenu.add(opcaocadastro);

        setJMenuBar(jMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelTabela)
                .addGap(474, 474, 474))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 647, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(labelTabela)
                        .addGap(205, 205, 205))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cadastroclienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cadastroclienteActionPerformed
        this.controler.abrirCadastroClientes();
    }//GEN-LAST:event_cadastroclienteActionPerformed

    private void agendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agendaActionPerformed
        this.controler.abrirAgenda();        
    }//GEN-LAST:event_agendaActionPerformed

    private void cadastrousuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cadastrousuarioActionPerformed
        this.controler.abrirCadastroUsuario();
    }//GEN-LAST:event_cadastrousuarioActionPerformed

    private void cadastroservicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cadastroservicoActionPerformed
        this.controler.abrirCadastroServicos();
    }//GEN-LAST:event_cadastroservicoActionPerformed

    private void sairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sairActionPerformed
        
        int response = JOptionPane.showConfirmDialog(frame,
                    "Você quer realmente sair da sua conta?",
                    "Confirmação de Saída",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE);

        // Verificar a resposta do usuário
        if(response == JOptionPane.YES_OPTION) {
            this.frame.dispose();
            this.controler.desconectarConta();
        } 
    }//GEN-LAST:event_sairActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem agenda;
    private javax.swing.JMenuItem cadastrocliente;
    private javax.swing.JMenuItem cadastroservico;
    private javax.swing.JMenuItem cadastrousuario;
    private javax.swing.JMenuBar jMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelTabela;
    private javax.swing.JMenu opcaocadastro;
    private javax.swing.JMenuItem sair;
    private javax.swing.JTable tabelaHome;
    private javax.swing.JLabel testLabel;
    // End of variables declaration//GEN-END:variables
    
    public void configuracaoJanela(){
        
        // Titulo
        frame.setTitle("Menu principal");
                
        // Tamanho    
        int labelWidth = 1160;  // Obtém a largura preferida da JLabel
        int labelHeight = 720; // Obtém a altura preferida da JLabel
        frame.setSize(labelWidth, labelHeight); 
        
        // Carrega o ícone e define para o JFrame
        ImageIcon icon = new ImageIcon(Main.class.getResource("/view/imagens/icons/agenda-icon.png")); // Substitua pelo caminho do seu ícone
        frame.setIconImage(icon.getImage()); // Define o ícone da janela
               
        // Impede o redimensionamento
        frame.setResizable(false); 

        // Configura a operação de fechamento
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
        // Resetar Frame
        frame.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                frame.setLocationRelativeTo(null);
                frame.setSize(labelWidth, labelHeight); 
            }
            @Override
            public void componentMoved(ComponentEvent e){
                frame.setLocationRelativeTo(null);
                frame.setSize(labelWidth, labelHeight); 
            }                    
        });
    }
    

    /*public void atualizarTabelaPrincipal(){
        AgendamentoDAO agendamentoDAO = new AgendamentoDAO();
        ArrayList<Agendamento> agendamentos = agendamentoDAO.selectAll();
        DefaultTableModel tablemodel = (DefaultTableModel) menuprincipal.getTabelaHome().getModel();
        tablemodel.setNumRows(0);
        for(Agendamento agendamento : agendamentos){            
            tablemodel.addRow(new Object[]{
                agendamento.getCliente(),
                agendamento.getServico(),
                agendamento.getObservacao(),
                agendamento.getDataFormatada(),
                agendamento.getHoraFormatada(),
                agendamento.getValor(),
            });
        }       
    }*/      
        
    public void adicionarNaTabelaHome(String nome, String servico, String obs, String data, String hora, float valor) {
        // Adicionando uma linha ao modelo da tabela
        DefaultTableModel model = (DefaultTableModel) this.getTabelaHome().getModel();
        model.addRow(new Object[]{nome, servico, obs, data, hora, valor});
    }
    
    public JTable getTabelaHome() {
        return tabelaHome;
    }

    public void setTabelaHome(JTable tabelaHome) {
        this.tabelaHome = tabelaHome;
    }
    
}
